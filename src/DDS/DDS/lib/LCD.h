
/* Автор:              Papandopala Papandopalavich
 * Имя файла:          Atmega16_LCD_LIB.c
 * Тип МК:			   Atmega16, Flash 16 Kbytes, SRAM 1 Kbytes, EEPROM 512 bytes.
 * Тактовая частота:   F_CPU 8000000 Гц
 * Дата:               28.06.2013 21:17:29
 * Версия ПО:          ATMEL STUDIO VERSION 6.1.2562
 * FUSES:              HIGH xx, LOW xx;
 * Описание:           Урезанная библиотека для работы с LCD дисплеями базирующимися на HD44780 
					   контроллерах. Данная библиотека работает по 4х и 8ми битной схеме подключения
					   LCD, поддерживает только вывод данных на дисплей*/ 

#include <inttypes.h>

//---------------------------------------------------------------------------------------------
//Если  хочешь использовать 8ми битную схему подключения, тогда раскомментируй #define LCD_8BIT
//#define LCD_8BIT
//---------------------------------------------------------------------------------------------

#ifndef LCD
#define LCD

#if 1

//Указываем порт к которому подключены выводы дисплея LCD DB0...DB7.
#define DPIN  PINC
#define DDDR  DDRC
#define DPORT PORTC	
						
//Пины  МК      LCD   
#define DB0	0// DB0
#define DB1	0// DB1
#define DB2	0// DB2	
#define DB3	0// DB3		
#define DB4	2// DB4  
#define DB5	3// DB5
#define DB6	4// DB6
#define DB7	5// DB7 + BF флаг занятости дисплея.

//Указываем порт к которому подключены выводы дисплея E, RS, R/W.
#define CDDR  DDRB
#define CPORT PORTB

// Указываем номера пинов МК, к которым подключаем дисплей.
#define E	3	// E	 СТРОБ.
#define RW	1   // R/W   R/W=1 читаем из LCD, R/W=0 записываем в LCD.
#define RS	0 	// RS	 RS=0 посылаем команду в LCD, RS=1 посылаем данные в LCD.

#endif
//----------------------------------Настройки закончены---------------------------------
#if 1
//Пользовательские функции, ими пользуемся в программе.
void LCDinit(void);							//Инициализация LCD                    
void LCDcommand(uint8_t);					//Отправка команды, настройка дисплея  
void LCDGotoXY(uint8_t, uint8_t);			//Устанавливаем курсор в X, Y позицию
void LCDdata(uint8_t);						//Вывести 1 символ на дисплей.
void LCDstring(char*i,uint8_t,uint8_t);		//Вывести строку на дисплей в позицию x,y
void LCDstring_of_sram(uint8_t*,uint8_t,uint8_t,uint8_t);//Вывести строку на дисплей в позицию x,y из ОЗУ		
void LCDstring_of_flash(const uint8_t*,uint8_t, uint8_t);//Вывести строку в позицию x,y из флеша
void LCDset(void);				//Двухстрочный дисплей 5x8 точек.
void LCDblank(void);			//Сделать невидимым инфо на дисплее
void LCDnblank(void);			//Сделать видимой инфо на дисплее + отключение видимых курсоров.
void LCDclear(void);			//Очистить дисплей от инфо + курсор на позицию 0,0
void LCDcursor_bl(void);		//Включить мигающий курсор
void LCDcursor_on(void);		//Включить подчеркивающий курсор
void LCDcursor_vi(void);		//Включить оба курсора
void LCDcursorOFF(void);		//Выключить курсор (любой)
void LCDacr(void);				//Cчетчик адреса AC всегда будет смещаться на n+1
void LCDacl(void);				//Cчетчик адреса AC всегда будет смещаться на n-1
void LCDcursorl(void);			//Сместить курсор влево на 1 символ
void LCDcursorr(void);			//Сместить курсор вправо на 1 символ
void LCDcursorln(uint8_t);		//Сместить курсор влево на n символов
void LCDcursorrn(uint8_t);		//Сместить курсор вправо на n символов
void LCDscreenl(void);			//Сместить экран влево на 1 символ
void LCDscreenr(void);			//Сместить экран вправо на 1 символ
void LCDscreenln(uint8_t);		//Сместить экран влево на n символов
void LCDscreenrn(uint8_t);		//Сместить экран вправо на n символов
void LCDscreenL(void);			//С каждым новым символом экран будет смещаться влево
void LCDscreenR(void);			//С каждым новым символом экран будет смещаться вправо
void LCDresshift(void);			//Курсор в позицию 0,0 + сброс всех сдвигов, изображение остается

//Двухстрочный дисплей.
#define LINE0 0x00
#define LINE1 0x40

#endif

#endif

/*примеры использования команд
LCDcommand(0b00101000);//Включаем 4х битный интерфейс приема/передачи и выбираем 5x8 точек.
LCDcommand(0b00000001);//Очистка экрана
LCDcommand(0b00000010);//Установка курсора в позицию 0,0 + сброс сдвигов
LCDcommand(0b00000110);//Вкл. инкримент счетчика адреса, движение изображения отк.
LCDcommand(0b00001100);//Включаем отображение на дисплее + без отображения курсора.
LCDdata('A');			//Вывели символ А
LCDGotoXY(6,1);			//Перевели курсор в седьмую позицию вторая строка.
LCDdata('B');			//И вывели символ В
LCDstring("Hi baby, i love you",0,0);//Вывели строку "Привет детка, я тебя люблю" в позицию 0,0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Перед использованием функции LCDstring_of_sram, нужно в озу память вклинить например такую строку
uint8_t text2[7] = {'H','I',' ','b','a','b','y'};
или такую, что в общемто одинаково.
uint8_t text3[7] = {"hi baby"};
Потом вызываем функцию вывода этой строки из озу
LCDstring_of_sram(text3,7,0,1); 7-это значит 7 символов в массиве. 0,1 позиция вывода x y. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Перед использованием функции LCDline_of_flush, нужно фо флеш память вклинить например такую строку
в конце не забываем символ 0 вставить, иначе эта функция выведет на дисплей всю флеш память МК.

const uint8_t text[] PROGMEM = {0x20,0xA8,0x70,0xB8,0xB3,0x65,0xBF,0x20,0xE3,0x65,0xBF,0xBA,
								0x61,0x21,0};//Привет детка!
Потом эту строку из флеша выводим на LCD так:
LCDline_of_flush(text,0,1);//В позицию 0,1 на русском выведется Привет детка!, если твой LCD 
							 поддерживает русские символы.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~							 						 
*/
/*
Инициализация дисплея проводится таким образом.
1.Включаем питание.
2.После VCC >=4.5V ждем не менее 15 мсек.
3.Отправка команды 0x30 - 0b110000
4.Ждем не менее 4.1 мсек
5.Отправка команды 0x30
6.Ждем не менее 100 мксек
7.Отправка команды 0x30
Приведенные выше операции являются инициализирующими для LCD
и способны вывести дисплей в рабочее состояние из любого состояния.
8.Далее работаем с дисплеем в обычном режиме.

В исходном состоянии Е=0, R/W=0, RS - произвольное, DB0...DB7 высокий импеданс (HI).
Такое состояние должно сигналов Е=0, R/W=0 должно поддерживаться все время в пррмежутках между
операциями обмена данными с МК.


Дисплей настраиваем так:

int main(void)
{
	init();		//Инициализация МК.
	LCDinit();	//Инициализация LCD, эту функцию в первую очередь, потом все остальное.

	while(1)//Главный цикл программы.
	{
		
	}
}

Карта символов дисплея.
LCDGotoXY(3,1);
Цифра 3 означает четвертую позицию в любой строке. Если 0, то это первая позиция в любой строке.
цифра 1 означает нижнюю строку а 0 верхнюю.
|0,0|1,0|2,0|3,0|4,0|5,0|6,0|7,0| - первая строка
|0,1|1,1|2,1|3,1|4,1|5,1|6,1|7,1| - вторая строка

1  0  0
1 I/D S  
I/D - смещение счетчика адреса, 0-уменьшение 1-увеличение
S   - сдвиг содержимого экрана 0 содержимое не сдвигается, 1 сдвигается, 
      если I/D - 0 то вправо, если 1 то влево.
LCDcommand(100) - счетчик n-1, экран не сдвигается. Символы будут выводится  <-
LCDcommand(110) - счетчик n+1, экран не сдвигается. Символы будут выводится  ->
LCDcommand(101)	- счетчик n-1, изображение сдвигается вправо с каждым новым символом
LCDcommand(111) - счетчик n+1, изображение сдвигается влево с каждым новым символом
	   	   
1   0   0   0  0	   
1  S/C R/L  -  -     
S/C (screen/cursor) - 0 сдвигается курсор, 1 сдвигается экран.
R/L (right/left)    - 0 сдвиг влево, 1 сдвиг вправо. за одну команду на 1 сдвиг

//Залей это в твой МК и увидишь как дисплей выведет на экран 40 символов из своей памяти сдвигая экран.
LCDcursor_on();
LCDscreenL();
LCDGotoXY(39,1);
uint8_t i=0x21;
while(i<0x70)
{
	LCDdata(i);
	_delay_ms(500);
	i++;
}

//Залей это в твой МК и увидишь как дисплей выведет на экран 40 символов из своей памяти сдвигая экран.
LCDcursor_on();
LCDscreenR();
LCDGotoXY(0,0);
uint8_t i=0x21;
while(i<0x70)
{
	LCDdata(i);
	_delay_ms(500);
	i++;
}

*/